from web3 import Web3, HTTPProvider
import json
import time

print("Deploy SmartContract Hypersound Multiple Mine")
print("")
web3 = Web3(Web3.HTTPProvider("https://rpc.blast.io"))

#connecting web3
if  web3.is_connected() == True:
    print("Web3 Connected...\n")
else:
    print("Error Connecting Please Try Again...")
    exit()
           
rawdata = '0x6080604052348015600e575f80fd5b505f80546001600160a01b0319163317815560408051634e606c4760e01b8152905173430000000000000000000000000000000000000292634e606c47926004808201939182900301818387803b1580156066575f80fd5b505af11580156077573d5f803e3d5ffd5b5050604051631d70c8d360e31b8152306004820152734300000000000000000000000000000000000002925063eb86469891506024015f604051808303815f87803b15801560c3575f80fd5b505af115801560d4573d5f803e3d5ffd5b50505050610573806100e55f395ff3fe60806040526004361061003f575f3560e01c806326f02add1461004857806327c7aaca146100675780633aeac4e114610086578063f2fde38b146100a557005b3661004657005b005b348015610053575f80fd5b5061004661006236600461041a565b6100c4565b348015610072575f80fd5b50610046610081366004610451565b61020c565b348015610091575f80fd5b506100466100a0366004610483565b6102b5565b3480156100b0575f80fd5b506100466100bf3660046104b4565b6103c0565b5f546001600160a01b031633146100f65760405162461bcd60e51b81526004016100ed906104d4565b60405180910390fd5b811561016a57604051634aa7d2f760e11b8152306004820181905260248201526002604360981b019063954fa5ee906044016020604051808303815f875af1158015610144573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610168919061050b565b505b80156101de5760405163662aa11d60e01b8152306004820181905260248201526002604360981b019063662aa11d906044016020604051808303815f875af11580156101b8573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101dc919061050b565b505b60405133904780156108fc02915f818181858888f19350505050158015610207573d5f803e3d5ffd5b505050565b5f546001600160a01b031633146102355760405162461bcd60e51b81526004016100ed906104d4565b5f5b818110156102b157604051639091793d60e01b8152602060048201525f6024820152737e82481423b09c78e4fd65d9c1473a36e5aed40590639091793d906044015f604051808303815f87803b15801561028f575f80fd5b505af11580156102a1573d5f803e3d5ffd5b5050600190920191506102379050565b5050565b5f546001600160a01b031633146102de5760405162461bcd60e51b81526004016100ed906104d4565b6040516370a0823160e01b81523060048201525f906001600160a01b038416906370a0823190602401602060405180830381865afa158015610322573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610346919061050b565b60405163a9059cbb60e01b81526001600160a01b038481166004830152602482018390529192509084169063a9059cbb906044016020604051808303815f875af1158015610396573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103ba9190610522565b50505050565b5f546001600160a01b031633146103e95760405162461bcd60e51b81526004016100ed906104d4565b5f80546001600160a01b0319166001600160a01b0392909216919091179055565b8015158114610417575f80fd5b50565b5f806040838503121561042b575f80fd5b82356104368161040a565b915060208301356104468161040a565b809150509250929050565b5f60208284031215610461575f80fd5b5035919050565b80356001600160a01b038116811461047e575f80fd5b919050565b5f8060408385031215610494575f80fd5b61049d83610468565b91506104ab60208401610468565b90509250929050565b5f602082840312156104c4575f80fd5b6104cd82610468565b9392505050565b60208082526017908201527f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000604082015260600190565b5f6020828403121561051b575f80fd5b5051919050565b5f60208284031215610532575f80fd5b81516104cd8161040a56fea2646970667358221220c8bfef4ee90604fde767f6b57aa9ff84a641b5e13530b6d109ece5dff0698ba264736f6c634300081a0033'

def Deploy(sender, senderkey):
    try:
        #estimate gas limit contract
        gasAmount = web3.eth.estimate_gas({
            'chainId': web3.eth.chain_id,
            'from': sender,
            'gasPrice': web3.eth.gas_price,
            'data': rawdata,
            'nonce': web3.eth.get_transaction_count(sender)
        })

        deploy_tx = {
            'chainId': web3.eth.chain_id,
            'from': sender,
            'gas': gasAmount,
            'gasPrice': web3.eth.gas_price,
            'data': rawdata,
            'nonce': web3.eth.get_transaction_count(sender)
        }
        #sign the transaction
        sign_txn = web3.eth.account.sign_transaction(deploy_tx, senderkey)
        #send transaction
        tx_hash = web3.eth.send_raw_transaction(sign_txn.rawTransaction)

        #get transaction hash
        txid = str(web3.to_hex(tx_hash))
        transaction_receipt = web3.eth.wait_for_transaction_receipt(tx_hash)
        print('')
        print(f'Deployed Success! Contract Address {transaction_receipt.contractAddress}')
        print(f'TX-ID : {txid}')
        print('')
    except Exception as e:
        print(f"Error : {e}")
        if str(e) == str("('execution reverted', 'no data')"):
            Deploy(sender, senderkey)
        else:
            print('')
        if str(e) == str("{'code': -32000, 'message': 'already known'}"):
            Deploy(sender, senderkey)
        else:
            print('')

senderkey = input('Input Privatekey EVM Address Blast : ')
def Deployed():
    sender = web3.eth.account.from_key(senderkey)
    print("")
    Deploy(sender.address, sender.key)
Deployed()