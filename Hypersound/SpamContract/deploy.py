from web3 import Web3, HTTPProvider
import json
import time

print("Deploy SmartContract Hypersound Multiple Mine")
print("")
web3 = Web3(Web3.HTTPProvider("https://rpc.blast.io"))

#connecting web3
if  web3.is_connected() == True:
    print("Web3 Connected...\n")
else:
    print("Error Connecting Please Try Again...")
    exit()
           
rawdata = '0x608060405234801561000f575f80fd5b50335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff16634e606c476040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156100a8575f80fd5b505af11580156100ba573d5f803e3d5ffd5b5050505073430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663eb864698306040518263ffffffff1660e01b815260040161010b919061017c565b5f604051808303815f87803b158015610122575f80fd5b505af1158015610134573d5f803e3d5ffd5b50505050610195565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6101668261013d565b9050919050565b6101768161015c565b82525050565b5f60208201905061018f5f83018461016d565b92915050565b61097f806101a25f395ff3fe608060405260043610610042575f3560e01c806326f02add1461004b57806327c7aaca146100735780639e281a981461009b578063f2fde38b146100c357610049565b3661004957005b005b348015610056575f80fd5b50610071600480360381019061006c9190610637565b6100eb565b005b34801561007e575f80fd5b50610099600480360381019061009491906106a8565b6102ee565b005b3480156100a6575f80fd5b506100c160048036038101906100bc919061072d565b61040e565b005b3480156100ce575f80fd5b506100e960048036038101906100e4919061076b565b61052f565b005b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610178576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016f906107f0565b60405180910390fd5b811561020f5773430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663954fa5ee30306040518363ffffffff1660e01b81526004016101cd92919061081d565b6020604051808303815f875af11580156101e9573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061020d9190610858565b505b80156102a65773430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663662aa11d30306040518363ffffffff1660e01b815260040161026492919061081d565b6020604051808303815f875af1158015610280573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102a49190610858565b505b3373ffffffffffffffffffffffffffffffffffffffff166108fc4790811502906040515f60405180830381858888f193505050501580156102e9573d5f803e3d5ffd5b505050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461037b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610372906107f0565b60405180910390fd5b5f5b8181101561040a57737e82481423b09c78e4fd65d9c1473a36e5aed40573ffffffffffffffffffffffffffffffffffffffff16639091793d6040518163ffffffff1660e01b81526004016103d0906108b6565b5f604051808303815f87803b1580156103e7575f80fd5b505af11580156103f9573d5f803e3d5ffd5b50505050808060010191505061037d565b5050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461049b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610492906107f0565b60405180910390fd5b737e82481423b09c78e4fd65d9c1473a36e5aed40573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b81526004016104ea9291906108e3565b6020604051808303815f875af1158015610506573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061052a919061091e565b505050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b3906107f0565b60405180910390fd5b805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f80fd5b5f8115159050919050565b61061681610602565b8114610620575f80fd5b50565b5f813590506106318161060d565b92915050565b5f806040838503121561064d5761064c6105fe565b5b5f61065a85828601610623565b925050602061066b85828601610623565b9150509250929050565b5f819050919050565b61068781610675565b8114610691575f80fd5b50565b5f813590506106a28161067e565b92915050565b5f602082840312156106bd576106bc6105fe565b5b5f6106ca84828501610694565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6106fc826106d3565b9050919050565b61070c816106f2565b8114610716575f80fd5b50565b5f8135905061072781610703565b92915050565b5f8060408385031215610743576107426105fe565b5b5f61075085828601610719565b925050602061076185828601610694565b9150509250929050565b5f602082840312156107805761077f6105fe565b5b5f61078d84828501610719565b91505092915050565b5f82825260208201905092915050565b7f43616c6c6572206973206e6f7420746865206f776e65720000000000000000005f82015250565b5f6107da601783610796565b91506107e5826107a6565b602082019050919050565b5f6020820190508181035f830152610807816107ce565b9050919050565b610817816106f2565b82525050565b5f6040820190506108305f83018561080e565b61083d602083018461080e565b9392505050565b5f815190506108528161067e565b92915050565b5f6020828403121561086d5761086c6105fe565b5b5f61087a84828501610844565b91505092915050565b5f82825260208201905092915050565b50565b5f6108a15f83610883565b91506108ac82610893565b5f82019050919050565b5f6020820190508181035f8301526108cd81610896565b9050919050565b6108dd81610675565b82525050565b5f6040820190506108f65f83018561080e565b61090360208301846108d4565b9392505050565b5f815190506109188161060d565b92915050565b5f60208284031215610933576109326105fe565b5b5f6109408482850161090a565b9150509291505056fea2646970667358221220578563c988acd7042443de8d6a3ba09d25804dcdeeb5958cdfd4cff8bd298c8e64736f6c634300081a0033'

def Deploy(sender, senderkey):
    try:
        #estimate gas limit contract
        gasAmount = web3.eth.estimate_gas({
            'chainId': web3.eth.chain_id,
            'from': sender,
            'gasPrice': web3.eth.gas_price,
            'data': rawdata,
            'nonce': web3.eth.get_transaction_count(sender)
        })

        deploy_tx = {
            'chainId': web3.eth.chain_id,
            'from': sender,
            'gas': gasAmount,
            'gasPrice': web3.eth.gas_price,
            'data': rawdata,
            'nonce': web3.eth.get_transaction_count(sender)
        }
        #sign the transaction
        sign_txn = web3.eth.account.sign_transaction(deploy_tx, senderkey)
        #send transaction
        tx_hash = web3.eth.send_raw_transaction(sign_txn.rawTransaction)

        #get transaction hash
        txid = str(web3.to_hex(tx_hash))
        transaction_receipt = web3.eth.wait_for_transaction_receipt(tx_hash)
        print('')
        print(f'Deployed Success! Contract Address {transaction_receipt.contractAddress}')
        print(f'TX-ID : {txid}')
        print('')
    except Exception as e:
        print(f"Error : {e}")
        if str(e) == str("('execution reverted', 'no data')"):
            Deploy(sender, senderkey)
        else:
            print('')
        if str(e) == str("{'code': -32000, 'message': 'already known'}"):
            Deploy(sender, senderkey)
        else:
            print('')

senderkey = input('Input Privatekey EVM Address Blast : ')
def Deployed():
    sender = web3.eth.account.from_key(senderkey)
    print("")
    Deploy(sender.address, sender.key)
Deployed()
